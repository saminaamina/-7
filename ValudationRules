using System;
using System.Linq;
using System.Collections.Generic;
namespace ValudationRules
{
    class Program
    {
        static void Main(string[] args)
        {
            int n = int.Parse(Console.ReadLine());
            List<Person> people = new List<Person>();
            for (int i = 0; i < n; i++)
            {
                string[] input = Console.ReadLine().Split(' ').ToArray();

                string firstName = input[0];
                string lastName = input[1];
                int age = int.Parse(input[2]);
                double salary = double.Parse(input[3]);

                try
                {
                    people.Add(new Person(firstName, lastName, age, salary));
                }
                catch (Exception)
                {

                    continue;
                }
               
            }
            foreach (var p in people)
            {
                Console.WriteLine(p.ToString());
            }
            people.OrderBy(p => p.Salary)
                .ToList().ForEach(p => Console.WriteLine(p.ToString()));
            

        }
    }
}





using System;
using System.Collections.Generic;
using System.Text;

namespace ValudationRules
{
    class Person
    {
        private string firstName;
        private string lastName;
        private int age;
        private double salary;


        public Person(string FirstName, string LastName, int age, double salary)
        {
            this.firstName = firstName;
            this.lastName = lastName;
            this.age = age;
            this.salary = salary;

        }
        public void setFirstName(string firstName)
        {
            if (firstName.Length < 3)
                throw new ArgumentException("First name cannot be less than 3 symbols");
            this.firstName = firstName;
        }
        public string getFirstName()
        {
            return this.firstName;
        }


        public void setLastName(string lastName)
        {
            if (lastName.Length < 3)
                throw new ArgumentException("Last name cannot be less than 3 symbols");
            this.lastName = lastName;
        }
        public string getLastName()
        {
            return this.lastName;
        }

        public void setAge(int age)
        {
            if (age < 1)
                throw new ArgumentException("Age cannot be zero or negative integer");
            this.age = age;
        }
        public int getAge()
        {
            return this.age;
        }

        public double Salary
        {
            get { return this.salary; }
            set {
                    if (value < 460)
                    {
                    throw new ArgumentException("Salary cannot be less than 460 leva");
                    }


                this.salary = value;
            }
        }
        public override string ToString()
        {
            return $"{this.firstName} {this.lastName} get {this.salary:f2}";
        }


    }
}
